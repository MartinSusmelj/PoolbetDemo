const btnConnect=document.getElementById('btn-connect');let connectedPubkey=null;async function connectWallet(){const p=window.solana;if(!p||!p.isPhantom){alert('Phantom wallet not found. Install Phantom or use demo mode.');return;}try{const resp=await p.connect();connectedPubkey=resp.publicKey.toString();btnConnect.textContent=connectedPubkey.slice(0,4)+'...'+connectedPubkey.slice(-4);btnConnect.classList.add('btn-ghost');btnConnect.classList.remove('btn-accent');}catch(e){console.log('Wallet connect cancelled',e);}}btnConnect.addEventListener('click',connectWallet);

const modal=document.getElementById('modal');document.getElementById('btn-create').addEventListener('click',()=>modal.classList.remove('hidden'));document.getElementById('modal-close').addEventListener('click',()=>modal.classList.add('hidden'));document.getElementById('cp-cancel').addEventListener('click',()=>modal.classList.add('hidden'));document.getElementById('cp-create').addEventListener('click',()=>{const name=document.getElementById('cp-name').value.trim();const coin=document.getElementById('cp-coin').value;const price=parseFloat(document.getElementById('cp-price').value);const datetime=document.getElementById('cp-datetime').value;const buyin=parseFloat(document.getElementById('cp-buyin').value);const windowMin=parseInt(document.getElementById('cp-window').value,10);if(!name||!coin||!price||!datetime||!buyin||!windowMin){alert('Please fill all fields.');return;}const id='POOL-'+Math.random().toString(36).slice(2,7).toUpperCase();POOLS.unshift({id,name,coin,side:Math.random()>0.5?'UP':'DOWN',minBuy:buyin,buyIn:0,status:'OPEN',closingIn:windowMin+'m',target:{price,time:datetime}});render();modal.classList.add('hidden');});

const COINS=['BTC','ETH','SOL','ARB','AVAX','DOGE','MATIC','ADA'];function pick(a){return a[Math.floor(Math.random()*a.length)];}
const POOLS=Array.from({length:48}).map((_,i)=>{const coin=pick(COINS);const statusPool=pick(['OPEN','LOCKED','RUNNING','RESOLVED']);const dir=pick(['UP','DOWN']);const minBuy=[5,10,15,20,25,50][Math.floor(Math.random()*6)];const name=`${coin} ${dir} #${i+1}`;const dt=new Date(Date.now()+Math.random()*7*24*3600*1000);return{id:'POOL-'+(1000+i),name,coin,side:dir,minBuy,buyIn:0,status:statusPool,closingIn:statusPool==='OPEN'?(15+(i%4)*15)+'m':(statusPool==='RUNNING'?'in play':'-'),target:{price:100+Math.round(Math.random()*50000),time:dt.toISOString().slice(0,16)}};});

const fSearch=document.getElementById('f-search');const fCoin=document.getElementById('f-coin');const fBuy=document.getElementById('f-buy');const fStatus=document.getElementById('f-status');document.getElementById('f-reset').addEventListener('click',()=>{fSearch.value='';fCoin.value='';fBuy.value='';fStatus.value='';render();});document.getElementById('f-apply').addEventListener('click',()=>render());
function applyFilters(list){const q=fSearch.value.trim().toLowerCase();const coin=fCoin.value;const buy=parseFloat(fBuy.value||'0');const status=fStatus.value;return list.filter(p=>{if(q&&!(p.name.toLowerCase().includes(q)||p.coin.toLowerCase().includes(q)))return false;if(coin&&p.coin!==coin)return false;if(!isNaN(buy)&&buy>0&&p.minBuy>buy)return false;if(status&&p.status!==status)return false;return true;});}

function poolCard(p){const statusColor=p.status==='OPEN'?'text-green-500':p.status==='RUNNING'?'text-yellow-400':p.status==='LOCKED'?'text-gray-400':'text-red-500';const sideColor=p.side==='UP'?'text-green-500':'text-red-500';return `<div class="card p-4"><div class="flex justify-between items-center"><div class="font-semibold">${p.name}</div><div class="text-xs ${statusColor}">${p.status}</div></div><div class="mt-2 grid grid-cols-2 gap-3 text-sm"><div><div class="text-muted text-xs">Coin</div><div class="font-semibold">${p.coin}</div></div><div><div class="text-muted text-xs">Side</div><div class="font-semibold ${sideColor}">${p.side}</div></div><div><div class="text-muted text-xs">Min Buy-in</div><div class="font-semibold">$${p.minBuy.toFixed(2)}</div></div><div><div class="text-muted text-xs">Target</div><div class="font-semibold">$${p.target.price} @ ${p.target.time.replace('T',' ')}</div></div></div><div class="mt-3 flex gap-2"><button class="px-3 py-2 rounded-md bg-white/10 hover:bg-white/20 text-sm">Details</button><button class="px-3 py-2 rounded-md bg-[#7C93F6] text-black text-sm">Join</button></div></div>`;}
function render(){const join=applyFilters(POOLS).filter(p=>p.status==='OPEN');document.getElementById('join-count').textContent=join.length;document.getElementById('join-list').innerHTML=join.slice(0,8).map(poolCard).join('');const all=applyFilters(POOLS);document.getElementById('all-count').textContent=all.length;document.getElementById('all-list').innerHTML=all.map(poolCard).join('');}
render();

const chartEl=document.getElementById('chart');const chart=LightweightCharts.createChart(chartEl,{layout:{background:{type:'solid',color:'#101626'},textColor:'white'},grid:{horzLines:{color:'rgba(255,255,255,0.06)'},vertLines:{color:'rgba(255,255,255,0.06)'}},rightPriceScale:{borderColor:'rgba(255,255,255,0.2)'},timeScale:{borderColor:'rgba(255,255,255,0.2)'}});const series=chart.addCandlestickSeries();function resize(){chart.applyOptions({width:chartEl.clientWidth,height:380});}window.addEventListener('resize',resize);resize();

async function fetchOhlc(coin='bitcoin',days=1){const url=`https://api.coingecko.com/api/v3/coins/${coin}/ohlc?vs_currency=usd&days=${days}`;const r=await fetch(url);if(!r.ok)throw new Error('Fetch blocked or failed');const arr=await r.json();return arr.map(x=>({time:Math.floor(x[0]/1000),open:x[1],high:x[2],low:x[3],close:x[4]}));}
const coinMap={BTC:'bitcoin',ETH:'ethereum',SOL:'solana',ARB:'arbitrum',AVAX:'avalanche-2',DOGE:'dogecoin',MATIC:'matic-network',ADA:'cardano'};
async function loadChart(symbol='BTC',days=1){document.getElementById('chart-title').textContent=`${symbol}/USDC`;const id=coinMap[symbol]||'bitcoin';try{const data=await fetchOhlc(id,days);series.setData(data);}catch(e){console.warn('CoinGecko blocked, using mock',e);const now=Math.floor(Date.now()/1000);const data=Array.from({length:240}).map((_,i)=>{const t=now-(240-i)*60;const o=60000+Math.round(Math.sin(i/8)*400);const h=o+Math.round(100+Math.random()*200);const l=o-Math.round(100+Math.random()*200);const c=l+Math.round(Math.random()*(h-l));return {time:t,open:o,high:h,low:l,close:c};});series.setData(data);}}
loadChart('BTC',1);
document.querySelectorAll('.tf').forEach(btn=>{btn.addEventListener('click',()=>{const days=parseInt(btn.getAttribute('data-tf'),10);const title=document.getElementById('chart-title').textContent;const sym=title.split('/')[0]||'BTC';loadChart(sym,days);});});
document.getElementById('all-list').addEventListener('click',(e)=>{const el=e.target.closest('.card');if(!el)return;const txt=el.textContent||'';for(const sym of Object.keys(coinMap)){if(txt.includes(`${sym} `)||txt.includes(` ${sym}`)){loadChart(sym,1);break;}}});